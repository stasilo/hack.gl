{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-runtime/core-js/array/from.js","node_modules/babel-runtime/core-js/get-iterator.js","node_modules/babel-runtime/core-js/is-iterable.js","node_modules/babel-runtime/core-js/object/assign.js","node_modules/babel-runtime/core-js/object/keys.js","node_modules/babel-runtime/core-js/promise.js","node_modules/babel-runtime/helpers/asyncToGenerator.js","node_modules/babel-runtime/helpers/extends.js","node_modules/babel-runtime/helpers/slicedToArray.js","node_modules/babel-runtime/helpers/toConsumableArray.js","node_modules/babel-runtime/regenerator/index.js","node_modules/core-js/library/fn/array/from.js","node_modules/core-js/library/fn/get-iterator.js","node_modules/core-js/library/fn/is-iterable.js","node_modules/core-js/library/fn/object/assign.js","node_modules/core-js/library/fn/object/keys.js","node_modules/core-js/library/fn/promise.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_add-to-unscopables.js","node_modules/core-js/library/modules/_an-instance.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_classof.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_create-property.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_for-of.js","node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_invoke.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_is-array-iter.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_iter-call.js","node_modules/core-js/library/modules/_iter-create.js","node_modules/core-js/library/modules/_iter-define.js","node_modules/core-js/library/modules/_iter-detect.js","node_modules/core-js/library/modules/_iter-step.js","node_modules/core-js/library/modules/_iterators.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_microtask.js","node_modules/core-js/library/modules/_new-promise-capability.js","node_modules/core-js/library/modules/_object-assign.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_object-gops.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_object-sap.js","node_modules/core-js/library/modules/_perform.js","node_modules/core-js/library/modules/_promise-resolve.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_redefine-all.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_set-species.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_species-constructor.js","node_modules/core-js/library/modules/_string-at.js","node_modules/core-js/library/modules/_task.js","node_modules/core-js/library/modules/_to-absolute-index.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/core.get-iterator-method.js","node_modules/core-js/library/modules/core.get-iterator.js","node_modules/core-js/library/modules/core.is-iterable.js","node_modules/core-js/library/modules/es6.array.from.js","node_modules/core-js/library/modules/es6.array.iterator.js","node_modules/core-js/library/modules/es6.object.assign.js","node_modules/core-js/library/modules/es6.object.keys.js","node_modules/core-js/library/modules/es6.object.to-string.js","node_modules/core-js/library/modules/es6.promise.js","node_modules/core-js/library/modules/es6.string.iterator.js","node_modules/core-js/library/modules/es7.promise.finally.js","node_modules/core-js/library/modules/es7.promise.try.js","node_modules/core-js/library/modules/web.dom.iterable.js","node_modules/regenerator-runtime/runtime-module.js","node_modules/regenerator-runtime/runtime.js","node_modules/whatwg-fetch/fetch.js","src/gl/create-gl-program.js","src/gl/default-uniforms.js","src/gl/init-fbo.js","src/gl/init-pixel-toy.js","src/gl/init-vertex-buffers.js","src/gl/texture-utils.js","src/gl/uniform-utils.js","src/hack-gl.js","src/init/options.js","src/lib/webgl-utils.js","src/shaders/audio-fragment-header.glsl","src/shaders/camera-fragment-header.glsl","src/shaders/fbo-fragment-header.glsl","src/shaders/pixeltoy/default-fragmentshader.glsl","src/shaders/pixeltoy/fragment-header.glsl","src/shaders/pixeltoy/vertex-shader.glsl","src/utils/audio-analyser.js","src/utils/execute-callback-or-array.js","src/utils/frame-count.js","src/utils/get-mouse-position.js","src/utils/iterate-object.js","src/webrtc/init-camera.js"],"names":[],"mappings":"AAAA;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;;ACDA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntkBC7cwB,e;AAAT,SAAS,eAAT,CAAyB,EAAzB,EAA6B,OAA7B,EAAsC,OAAtC,EAA+C;AAC1D;AACA,QAAI,UAAU,GAAG,aAAH,EAAd;AACA,QAAI,CAAC,OAAL,EAAc;AACV,eAAO,IAAP;AACH;;AAED;AACA,QAAI,eAAe,aAAa,EAAb,EAAiB,GAAG,aAApB,EAAmC,OAAnC,CAAnB;AACA,QAAI,iBAAiB,aAAa,EAAb,EAAiB,GAAG,eAApB,EAAqC,OAArC,CAArB;;AAEA;AACA,OAAG,YAAH,CAAgB,OAAhB,EAAyB,YAAzB;AACA,OAAG,YAAH,CAAgB,OAAhB,EAAyB,cAAzB;;AAEA;AACA,OAAG,WAAH,CAAe,OAAf;;AAEA;AACA,QAAI,CAAC,GAAG,mBAAH,CAAuB,OAAvB,EAAgC,GAAG,WAAnC,CAAL,EAAsD;AAClD,YAAI,QAAQ,GAAG,iBAAH,CAAqB,OAArB,CAAZ;;AAEA,WAAG,aAAH,CAAiB,OAAjB;AACA,WAAG,YAAH,CAAgB,cAAhB;AACA,WAAG,YAAH,CAAgB,YAAhB;;AAEA,sDAA4C,KAA5C;AACH;;AAED,WAAO,OAAP;AACH;;AAED,SAAS,YAAT,CAAsB,EAAtB,EAA0B,IAA1B,EAAgC,MAAhC,EAAwC;AACpC;AACA,QAAI,SAAS,GAAG,YAAH,CAAgB,IAAhB,CAAb;AACA,QAAI,CAAC,MAAL,EAAa;AACT,cAAM,iCAAN;AACH;;AAED;AACA,OAAG,YAAH,CAAgB,MAAhB,EAAwB,MAAxB;AACA;AACA,OAAG,aAAH,CAAiB,MAAjB;;AAEA;AACA,QAAI,WAAW,GAAG,kBAAH,CAAsB,MAAtB,EAA8B,GAAG,cAAjC,CAAf;AACA,QAAI,CAAC,QAAL,EAAe;AACX,YAAI,QAAQ,GAAG,gBAAH,CAAoB,MAApB,CAAZ;AACA,WAAG,YAAH,CAAgB,MAAhB;AACA,qDAA2C,KAA3C;AACH;;AAED,WAAO,MAAP;AACH;;;;;;;;;;;ACrDD;;;;AACA;;;;AAEA,IAAM,YAAY,KAAK,GAAL,EAAlB;;AAEO,IAAI,4CAAkB;AACzB,kBAAc;AACV,cAAM,KADI;AAEV,eAAO,CAAC,GAAD,EAAM,GAAN;AAFG,KADW;AAKzB,aAAS;AACL,cAAM,KADD;AAEL,eAAO,CAAC,GAAD,EAAM,GAAN,CAFF;AAGL,gBAAQ;AAAA,mBAAM,iCAAN;AAAA;AAHH,KALgB;AAUzB,YAAQ;AACJ,cAAM,GADF;AAEJ,eAAO,GAFH;AAGJ,gBAAQ;AAAA,mBAAM,CAAC,KAAK,GAAL,KAAa,SAAd,IAA2B,IAAjC;AAAA;AAHJ,KAViB;AAezB,mBAAe;AACX,cAAM,GADK;AAEX,eAAO,gCAFI;AAGX;AAHW;AAfU,CAAtB;;;;;;;;;;;;;;;;;;;;;;;wFCUA,kBAA+B,EAA/B,EAAmC,WAAnC,EAAgD,cAAhD,EAAgE,OAAhE,EAAyE,eAAzE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iCADD,GACgB,iBADhB,gCAEiB,YAAY,mBAAZ,GAAkC,oBAAlC,GAAyD,EAF1E,iCAGiB,YAAY,aAAZ,GAA4B,mBAA5B,GAAkD,EAHnE,iCAIiB,cAAc,iBAAd,GAAkC,EAJnD,gCAKiB,YAAY,cAL7B;AAOC,sCAPD,gEASI,YAAY,QAThB;;;AAaH,uCAAe,YAAf,CAA4B,KAA5B,GAAoC,CAChC,QAAQ,UAAR,CAAmB,KADa,EAEhC,QAAQ,UAAR,CAAmB,MAFa,CAApC;;AAbG,6BAkBA,YAAY,mBAlBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAmBiC,oCAnBjC;;AAAA;AAmBC,uCAAe,QAnBhB;;AAAA;AAAA,6BAsBA,YAAY,aAtBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAuBqC,6CAAyB,EAAzB,EAA6B,WAA7B,CAvBrC;;AAAA;AAuBC,uCAAe,YAvBhB;;AAAA;;AA0BH;AACI,2BA3BD;AAAA;;AA6BC,8BAAM,uBAAuB,EAAvB,EAA2B,WAA3B,EAAwC,OAAxC,CAAN;AA7BD;AAAA;;AAAA;AAAA;AAAA;;AA+BC,gCAAQ,KAAR;AA/BD;;AAAA;;AAmCH,uCAAe,cAAf,IAAiC;AAC7B,kCAAM,OADuB;AAE7B,sCAAU,IAAI,QAFe;AAG7B,sCAAU,IAAI;AAHe,yBAAjC;;AAMI,kCAzCD,GAyCc,+BAAgB,EAAhB,EAAoB,eAApB,EAAqC,SAArC,CAzCd;;AAAA,4BA0CE,UA1CF;AAAA;AAAA;AAAA;;AAAA,8BA2CO,2CA3CP;;AAAA;;AA8CH,2BAAG,UAAH,CAAc,UAAd;;AAEI,sCAhDD,GAgDkB,iCAAkB,EAAlB,EAAsB,UAAtB,CAhDlB;AAAA;AAAA,+BAiDqB,gCAAa,EAAb,EAAiB,UAAjB,EAA6B,cAA7B,EAA6C,cAA7C,CAjDrB;;AAAA;AAiDC,mCAjDD;;AAmDC,uCAnDD,GAmDmB,SAAlB,eAAkB,GAAM;AACxB,+BAAG,UAAH,CAAc,UAAd;;AAEA,iEAAkB,EAAlB,EAAsB,WAAtB;AACA,0CAAc,kCAAe,EAAf,EAAmB,WAAnB,CAAd;;AAEA,+BAAG,eAAH,CAAmB,GAAG,WAAtB,EAAmC,GAAnC,EANwB,CAMiB;;AAEzC;AACA,gCAAG,YAAY,cAAZ,CAAH,EAAgC;AAC5B,oCAAI,MAAM,IAAI,QAAd;AACA,oCAAI,QAAJ,GAAe,IAAI,QAAnB;AACA,oCAAI,QAAJ,GAAe,GAAf;;AAEA,mCAAG,oBAAH,CAAwB,GAAG,WAA3B,EAAwC,GAAG,iBAA3C,EAA8D,GAAG,UAAjE,EAA6E,IAAI,QAAjF,EAA2F,CAA3F;;AAEA,mCAAG,aAAH,CAAiB,eAAa,YAAY,cAAZ,EAA4B,aAAzC,CAAjB;AACA,mCAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,IAAI,QAAlC;AACA,mCAAG,SAAH,CAAa,YAAY,cAAZ,EAA4B,OAAzC,EAAkD,YAAY,cAAZ,EAA4B,aAA9E;AACH;;AAED;AACA,+BAAG,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB,QAAQ,UAAR,CAAmB,KAArC,EAA4C,QAAQ,UAAR,CAAmB,MAA/D;AACA,+BAAG,KAAH,CAAS,GAAG,gBAAH,GAAsB,GAAG,gBAAlC;AACA,+BAAG,UAAH,CAAc,GAAG,cAAjB,EAAiC,CAAjC,EAAoC,cAApC;;AAEA,+BAAG,eAAH,CAAmB,GAAG,WAAtB,EAAmC,IAAnC,EA1BwB,CA0BkB;AAC1C,+BAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,IAA9B;AACA;AACH,yBAhFE;;AAAA,0DAkFI;AACH,4DADG;AAEH,wCAAY,YAAY,cAAZ,CAFT;AAGH;AAAA,qHAAa,iBAAO,WAAP;AAAA;AAAA;AAAA;AAAA;AACT,uDAAG,UAAH,CAAc,UAAd;AADS;AAAA;AAAA,kEAGF,WAHE;AAAA;AAAA,2DAIK,gCAAa,EAAb,EAAiB,UAAjB,EAA6B,WAA7B,EAA0C,cAA1C,CAJL;;AAAA;AAAA;AAET,+DAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAb;;AAAA;AAAA;AAAA;AAAA;AAHG,yBAlFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,e;;;;;AAftB;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAM,oBAAoB,QAAQ,0CAAR,CAA1B;AACA,IAAM,sBAAsB,QAAQ,uCAAR,CAA5B;AACA,IAAM,uBAAuB,QAAQ,wCAAR,CAA7B;AACA,IAAM,oBAAoB,QAAQ,qCAAR,CAA1B;AACA,IAAM,kBAAkB,QAAQ,wCAAR,CAAxB;AACA,IAAM,wBAAwB,QAAQ,iDAAR,CAA9B;;AAiGA,SAAS,sBAAT,CAAgC,EAAhC,EAAoC,WAApC,EAAiD,OAAjD,EAA0D;AACtD,QAAI,oBAAJ;AAAA,QAAiB,oBAAjB;;AAEA;AACA,QAAI,QAAQ,SAAR,KAAQ,GAAM;AACd,YAAI,WAAJ,EAAiB;AACb,eAAG,iBAAH,CAAqB,WAArB;AACH;AACD,YAAI,QAAJ,EAAc;AACV,eAAG,aAAH,CAAiB,QAAjB;AACH;;AAED,YAAI,QAAJ,EAAc;AACV,eAAG,aAAH,CAAiB,QAAjB;AACH;;AAED,YAAI,WAAJ,EAAiB;AACb,eAAG,kBAAH,CAAsB,WAAtB;AACH;;AAED,eAAO,IAAP;AACH,KAjBD;;AAmBA;AACA,kBAAc,GAAG,iBAAH,EAAd;AACA,QAAI,CAAC,WAAL,EAAkB;AACd,cAAM,sCAAN;AACA,eAAO,OAAP;AACH;;AAED;AACA,QAAI,WAAW,GAAG,aAAH,EAAf,CA/BsD,CA+BnB;AACnC,QAAI,CAAC,QAAL,EAAe;AACX,cAAM,iCAAN;AACA,eAAO,OAAP;AACH;;AAED,QAAI,WAAW,GAAG,aAAH,EAAf,CArCsD,CAqCnB;AACnC,QAAI,CAAC,QAAL,EAAe;AACX,cAAM,iCAAN;AACA,eAAO,OAAP;AACH;;AAED;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,QAA9B;AACA;AACA,OAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,GAAG,IAAnC,EAAyC,QAAQ,UAAR,CAAmB,KAA5D,EAAmE,QAAQ,UAAR,CAAmB,MAAtF,EAA8F,CAA9F,EAAiG,GAAG,IAApG,EAA0G,GAAG,aAA7G,EAA4H,IAA5H;;AAEA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,kBAAnC,EAAuD,GAAG,MAA1D;AACA;AACA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,GAAG,aAAtD;AACA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,GAAG,aAAtD;;AAEA,gBAAY,QAAZ,GAAuB,QAAvB;;AAEA;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,QAA9B;AACA;AACA,OAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,GAAG,IAAnC,EAAyC,QAAQ,UAAR,CAAmB,KAA5D,EAAmE,QAAQ,UAAR,CAAmB,MAAtF,EAA8F,CAA9F,EAAiG,GAAG,IAApG,EAA0G,GAAG,aAA7G,EAA4H,IAA5H;;AAEA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,kBAAnC,EAAuD,GAAG,MAA1D;AACA;AACA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,GAAG,aAAtD;AACA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,GAAG,aAAtD;;AAEA,gBAAY,QAAZ,GAAuB,QAAvB;;AAEA;AACA,kBAAc,GAAG,kBAAH,EAAd,CApEsD,CAoEf;AACvC,QAAI,CAAC,WAAL,EAAkB;AACd,cAAM,sCAAN;AACA,eAAO,OAAP;AACH;;AAED;AACA,OAAG,gBAAH,CAAoB,GAAG,YAAvB,EAAqC,WAArC;AACA,OAAG,mBAAH,CAAuB,GAAG,YAA1B,EAAwC,GAAG,iBAA3C,EAA8D,QAAQ,UAAR,CAAmB,KAAjF,EAAwF,QAAQ,UAAR,CAAmB,MAA3G;;AAEA;AACA,OAAG,eAAH,CAAmB,GAAG,WAAtB,EAAmC,WAAnC;AACA,OAAG,oBAAH,CAAwB,GAAG,WAA3B,EAAwC,GAAG,iBAA3C,EAA8D,GAAG,UAAjE,EAA6E,QAA7E,EAAuF,CAAvF;AACA,OAAG,uBAAH,CAA2B,GAAG,WAA9B,EAA2C,GAAG,gBAA9C,EAAgE,GAAG,YAAnE,EAAiF,WAAjF;;AAEA;AACA,QAAI,IAAI,GAAG,sBAAH,CAA0B,GAAG,WAA7B,CAAR;AACA,QAAI,GAAG,oBAAH,KAA4B,CAAhC,EAAmC;AAC/B,sDAA4C,EAAE,QAAF,EAA5C;AACA,eAAO,OAAP;AACH;;AAED;AACA,OAAG,eAAH,CAAmB,GAAG,WAAtB,EAAmC,IAAnC;AACA,OAAG,gBAAH,CAAoB,GAAG,YAAvB,EAAqC,IAArC;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,IAA9B;;AAEA,WAAO,WAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AC9MD;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,IAAM,oBAAoB,QAAQ,0CAAR,CAA1B;AACA,IAAM,sBAAsB,QAAQ,uCAAR,CAA5B;AACA,IAAM,uBAAuB,QAAQ,wCAAR,CAA7B;AACA,IAAM,oBAAoB,QAAQ,qCAAR,CAA1B;AACA,IAAM,kBAAkB,QAAQ,wCAAR,CAAxB;AACA,IAAM,wBAAwB,QAAQ,iDAAR,CAA9B;;;wFAEe,iBAA4B,EAA5B,EAAgC,OAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACP,mCADO,gEAGJ,QAAQ,QAHJ;AAMP,sCANO,GAMa,iBANb,qCAOc,QAAQ,mBAAR,GAA8B,oBAA9B,GAAqD,EAPnE,sCAQc,QAAQ,aAAR,GAAwB,mBAAxB,GAA8C,EAR5D,sCASc,QAAQ,WAAR,GAAsB,iBAAtB,GAA0C,EATxD,sCAUc,QAAQ,cAAR,GAAyB,QAAQ,cAAjC,GAAkD,qBAVhE;;;AAYX,oCAAY,YAAZ,CAAyB,KAAzB,GAAiC,CAAC,QAAQ,UAAR,CAAmB,KAApB,EAA2B,QAAQ,UAAR,CAAmB,MAA9C,CAAjC;;AAZW,6BAcR,QAAQ,mBAdA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAesB,mCAAkB,OAAlB,CAftB;;AAAA;AAeP,oCAAY,QAfL;;AAAA;AAAA,6BAkBR,QAAQ,aAlBA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAmB0B,6CAAyB,EAAzB,EAA6B,OAA7B,CAnB1B;;AAAA;AAmBP,oCAAY,YAnBL;;AAAA;AAsBP,4BAtBO,GAsBA,EAtBA;AAuBP,mCAvBO,GAuBO,EAvBP;;AAAA,6BAyBR,QAAQ,WAzBA;AAAA;AAAA;AAAA;;AA0BH,gCA1BG,GA0BQ,CA1BR;;AAAA,6BA4BJ,QAAQ,WAAR,CAAoB,MA5BhB;AAAA;AAAA;AAAA;;AA6BC,oCA7BD,GA6Be,EA7Bf;AAAA;AAAA;AAAA;AAAA;AAAA,+DA+BoB,QAAQ,WA/B5B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BK,mCA/BL;AAAA;AAAA,+BAgCiB,8BAAgB,EAAhB,EAAoB,WAApB,YAAyC,QAAzC,EAAqD,OAArD,EAA8D,YAA9D,CAhCjB;;AAAA;AAgCK,2BAhCL;;;AAkCC,4BAAG,OAAO,IAAI,UAAX,KAA0B,WAA7B,EAA0C;AACtC,kDAAoB,QAApB,IAAkC,IAAI,UAAtC;AACA,mDAAoB,QAApB,IAAkC,IAAI,UAAtC,CAFsC,CAEY;AACrD;;AAED,6BAAK,IAAL,CAAU,GAAV;AACA;;AAxCD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AA2CH;AA3CG;AAAA;AAAA;AAAA;AAAA,gEA4CY,IA5CZ;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4CK,4BA5CL;AAAA;AAAA,+BA6CO,KAAI,WAAJ,CAAgB,YAAhB,CA7CP;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAgDa,8BAAgB,EAAhB,EAAoB,QAAQ,WAA5B,YAAiD,QAAjD,EAA6D,OAA7D,CAhDb;;AAAA;AAgDC,6BAhDD;;AAiDH,8CAAoB,QAApB,IAAkC,MAAI,UAAtC;AACA,6BAAK,IAAL,CAAU,KAAV;;AAlDG;AAsDP,+BAtDO,GAsDG,+BAAgB,EAAhB,EAAoB,eAApB,EAAqC,cAArC,CAtDH;;AAAA,4BAuDN,OAvDM;AAAA;AAAA;AAAA;;AAAA,8BAwDD,4CAxDC;;AAAA;;AA2DX,2BAAG,UAAH,CAAc,OAAd;AACI,mCA5DO,GA4DO,iCAAkB,EAAlB,EAAsB,OAAtB,EAA+B,OAA/B,CA5DP;AAAA;AAAA,+BA6DU,gCAAa,EAAb,EAAiB,OAAjB,EAA0B,WAA1B,EAAuC,eAAvC,CA7DV;;AAAA;AA6DP,gCA7DO;;AA+DP,6CA/DO,GA+DiB,SAAxB,qBAAwB,GAAM;AAC9B,+BAAG,UAAH,CAAc,OAAd;;AAEA,iEAAkB,EAAlB,EAAsB,QAAtB;AACA,uCAAW,kCAAe,EAAf,EAAmB,QAAnB,EAA6B,OAA7B,CAAX;;AAEA,+BAAG,QAAH,CAAY,CAAZ,EAAe,CAAf,EAAkB,QAAQ,UAAR,CAAmB,KAArC,EAA4C,QAAQ,UAAR,CAAmB,MAA/D,EAN8B,CAM0C;AACxE,+BAAG,KAAH,CAAS,GAAG,gBAAZ;AACA,+BAAG,UAAH,CAAc,GAAG,cAAjB,EAAiC,CAAjC,EAAoC,WAApC;AACH,yBAxEU;;AA0EX;;;AACI,+BA3EO,GA2EG,SAAV,OAAU,GAAM;AAChB,gCAAG,KAAK,MAAR,EAAgB;AAAA;AAAA;AAAA;;AAAA;AACZ,qFAAe,IAAf,iHAAqB;AAAA,4CAAb,KAAa;;AACjB,8CAAI,eAAJ;AACH;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIf;;AAED;;AAEA,kEAAuB,QAAQ,QAA/B;AACA;AACA,kDAAsB,OAAtB;AACH,yBAvFU;;AAyFX;;AAzFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;aAAe,Y;;;;WAAA,Y;;;;;;;;;;;kBCnBN,iB;AAAT,SAAS,iBAAT,CAA2B,EAA3B,EAA+B,OAA/B,EAAwC;AACnD;AACA,QAAI,WAAW,IAAI,YAAJ,CAAiB,CAC5B,CAAC,GAD2B,EACtB,GADsB,EAE5B,CAAC,GAF2B,EAEtB,CAAC,GAFqB,EAG5B,GAH4B,EAGvB,GAHuB,EAI5B,GAJ4B,EAIvB,CAAC,GAJsB,CAAjB,CAAf;;AAOA,QAAI,cAAc,CAAlB,CATmD,CAS9B;;AAErB;AACA,QAAI,eAAe,GAAG,YAAH,EAAnB;AACA,QAAI,CAAC,YAAL,EAAmB;AACf,cAAM,4CAAN;AACH;;AAED;AACA,OAAG,UAAH,CAAc,GAAG,YAAjB,EAA+B,YAA/B;AACA;AACA,OAAG,UAAH,CAAc,GAAG,YAAjB,EAA+B,QAA/B,EAAyC,GAAG,WAA5C;;AAEA,QAAI,aAAa,GAAG,iBAAH,CAAqB,OAArB,EAA8B,YAA9B,CAAjB;AACA,QAAI,aAAa,CAAjB,EAAoB;AAChB,cAAM,mEAAN;AACH;;AAED;AACA,OAAG,mBAAH,CAAuB,UAAvB,EAAmC,CAAnC,EAAsC,GAAG,KAAzC,EAAgD,KAAhD,EAAuD,CAAvD,EAA0D,CAA1D;AACA;AACA,OAAG,uBAAH,CAA2B,UAA3B;;AAEA,WAAO,WAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFC/BM,iBAA+B,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,yDACI,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,gCAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,kCAAM,MAAN,GAAe;AAAA,uCAAM,QAAQ,KAAR,CAAN;AAAA,6BAAf;AACA,kCAAM,OAAN,GAAgB,UAAC,CAAD;AAAA,uCAAO,OAAO,CAAP,CAAP;AAAA,6BAAhB;AACA,kCAAM,GAAN,GAAY,KAAK,GAAjB;AACH,yBALM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,e;;;;;QASN,W,GAAA,W;QAmFA,c,GAAA,c;QAcA,c,GAAA,c;QAOA,iB,GAAA,iB;QAcA,a,GAAA,a;;;;AAjIhB,IAAI,gBAAgB,CAApB;;AAWO,SAAS,WAAT,CAAqB,EAArB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC;AACzC,QAAM,kBAAkB,GAAG,YAAH,CAAgB,GAAG,uBAAnB,CAAxB;AACA,QAAG,gBAAgB,eAAnB,EAAoC;AAChC,wDAA8C,eAA9C;AACH;;AAED,QAAI,UAAU,GAAG,aAAH,EAAd;;AAEA;AACA,OAAG,aAAH,CAAiB,eAAa,aAAb,CAAjB;;AAEA;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,OAA9B;;AAEA;AACA,QAAG,OAAO,KAAK,KAAZ,KAAsB,WAAtB,IAAqC,KAAK,KAAL,IAAc,KAAtD,EAA6D;AACzD,WAAG,WAAH,CAAe,GAAG,mBAAlB,EAAuC,CAAvC;AACH;;AAED;;AAEA;AACA,QAAI,cAAc,GAAG,aAArB;AAAA,QAAoC,cAAc,GAAG,aAArD;AACA,QAAG,2BAA2B,KAA3B,CAAH,EAAsC;AAClC,sBAAc,GAAG,MAAjB;AACA,sBAAc,GAAG,MAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,OAA/B,EAAwC;AACpC,sBAAc,GAAG,aAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,OAA/B,EAAwC;AACpC,sBAAc,GAAG,aAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,QAA/B,EAAyC;AACrC,sBAAc,GAAG,MAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,QAA/B,EAAyC;AACrC,sBAAc,GAAG,MAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,iBAA/B,EAAkD;AAC9C,sBAAc,GAAG,eAAjB;AACH;;AAED,QAAG,KAAK,KAAL,IAAc,KAAK,KAAL,IAAc,iBAA/B,EAAkD;AAC9C,sBAAc,GAAG,eAAjB;AACH;;AAED,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,WAAnD;AACA,OAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,cAAnC,EAAmD,WAAnD;;AAEA,QAAI,iBAAiB,GAAG,IAAxB,CAvDyC,CAuDX;AAC9B,QAAI,YAAY,GAAG,IAAnB,CAxDyC,CAwDhB;AACzB,QAAI,SAAS,CAAb;;AAEA;AACA,QAAG,OAAO,KAAK,IAAZ,KAAqB,WAAxB,EAAqC;AACjC,WAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,cAAhC,EAAgD,KAAK,IAAL,CAAU,CAAV,CAAhD,EAA8D,KAAK,IAAL,CAAU,CAAV,CAA9D,EAA4E,CAA5E,EAA+E,SAA/E,EAA0F,GAAG,aAA7F,EAA4G,KAA5G;AACA;AACH,KAHD,MAGO;AACH,WAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,cAAhC,EAAgD,SAAhD,EAA2D,GAAG,aAA9D,EAA6E,KAA7E;AACH;;AAED,QAAG,KAAK,YAAR,EAAsB;AAClB,WAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,kBAAnC,EAAuD,GAAG,qBAA1D;AACA,WAAG,cAAH,CAAkB,GAAG,UAArB;AACH,KAHD,MAGO;AACH,WAAG,aAAH,CAAiB,GAAG,UAApB,EAAgC,GAAG,kBAAnC,EAAuD,GAAG,MAA1D;AACH;;AAED;AACA,OAAG,SAAH,CAAa,KAAK,OAAlB,EAA2B,aAA3B;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,OAAL,GAAe,OAAf;;AAEA;AACA,WAAO,IAAP;AACH;;AAEM,SAAS,cAAT,CAAwB,EAAxB,EAA4B,IAA5B,EAAkC;AACrC,OAAG,aAAH,CAAiB,eAAa,aAAb,CAAjB;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,KAAK,QAAnC;;AAEA,QAAG,KAAK,OAAR,EAAiB;AACb,WAAG,SAAH,CAAa,KAAK,OAAlB,EAA2B,aAA3B;AACH;;AAED,SAAK,aAAL,GAAqB,aAArB;AACA;;AAEA,WAAO,IAAP;AACH;;AAEM,SAAS,cAAT,CAAwB,EAAxB,EAA4B,IAA5B,EAAkC;AACrC,OAAG,aAAH,CAAiB,eAAa,KAAK,aAAlB,CAAjB;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,KAAK,QAAnC;AACA,OAAG,SAAH,CAAa,KAAK,OAAlB,EAA2B,KAAK,aAAhC;AACA,WAAO,IAAP;AACH;;AAEM,SAAS,iBAAT,CAA2B,EAA3B,EAA+B,QAA/B,EAAyC;AAC5C,QAAI,cAAc,oBAAY,QAAZ,EAAsB,MAAtB,CAA6B,UAAC,CAAD,EAAI,WAAJ;AAAA,eAC3C,YAAY,UAAZ,CAAuB,OAAvB,+CACM,CADN,IACS,SAAS,WAAT,CADT,KAEE,CAHyC;AAAA,KAA7B,EAIf,EAJe,CAAlB;;AAMA,gBAAY,OAAZ,CAAoB,mBAAW;AAC3B,WAAG,aAAH,CAAiB,eAAa,QAAQ,aAArB,CAAjB;AACA,WAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,QAAQ,QAAtC;AACA,WAAG,SAAH,CAAa,QAAQ,OAArB,EAA8B,QAAQ,aAAtC;AACH,KAJD;AAKH;;AAEM,SAAS,aAAT,CAAuB,EAAvB,EAA2B,IAA3B,EAAiC;AACpC,OAAG,aAAH,CAAiB,eAAa,KAAK,aAAlB,CAAjB;AACA,OAAG,WAAH,CAAe,GAAG,UAAlB,EAA8B,KAAK,OAAnC;;AAEA,QAAI,iBAAiB,GAAG,IAAxB,CAJoC,CAIN;AAC9B,QAAI,YAAY,GAAG,IAAnB,CALoC,CAKX;;AAEzB,QAAG,OAAO,KAAK,IAAZ,KAAqB,WAAxB,EAAqC;AACjC,WAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,cAAhC,EAAgD,KAAK,IAAL,CAAU,CAAV,CAAhD,EAA8D,KAAK,IAAL,CAAU,CAAV,CAA9D,EAA4E,CAA5E,EAA+E,SAA/E,EAA0F,GAAG,aAA7F,EAA4G,KAAK,KAAjH;AACH,KAFD,MAEO;AACH,WAAG,UAAH,CAAc,GAAG,UAAjB,EAA6B,CAA7B,EAAgC,cAAhC,EAAgD,SAAhD,EAA2D,GAAG,aAA9D,EAA6E,KAAK,KAAlF;AACH;;AAED;AACH;;AAED,SAAS,0BAAT,CAAoC,KAApC,EAA2C;AACzC,WAAO,CAAC,MAAM,YAAN,GAAsB,MAAM,YAAN,GAAqB,CAA5C,KAAmD,CAAnD,IAAwD,CAAC,MAAM,aAAN,GAAuB,MAAM,aAAN,GAAsB,CAA9C,KAAqD,CAApH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFChJM,iBAA4B,EAA5B,EAAgC,OAAhC,EAAyC,WAAzC,EAAsD,UAAtD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC,8BADD,GACU,EADV;AAAA;AAAA;AAAA;AAAA;AAAA,+DAG6B,6BAAc,WAAd,CAH7B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oFAGO,WAHP,mBAGoB,IAHpB;AAIK,+BAJL,GAIe,GAAG,kBAAH,CAAsB,OAAtB,EAA+B,IAAI,MAAJ,CAAW,WAAX,CAA/B,CAJf;;AAAA,4BAKM,OALN;AAAA;AAAA;AAAA;;AAMK,gCAAQ,IAAR,CAAa,aAAW,UAAX,6DAC0C,WAD1C,gCAEA,8CAFb;;AAIA;;AAVL,8BAWQ,KAAK,IAAL,IAAa,OAXrB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgBK,mCAhBL,8BAiBQ,IAjBR;AAkBK;AAlBL;;AAqBC;;AArBD;AAAA,+BAsBqB,gBAAgB,EAAhB,EAAoB,WAApB,CAtBrB;;AAAA;AAsBC,mCAtBD;;AAuBC,+BAAO,WAAP,IAAsB,WAAtB;;AAvBD;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,yDA0BI,MA1BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,Y;;;;;;yFA0Cf,kBAA+B,EAA/B,EAAmC,IAAnC;AAAA,YAAyC,QAAzC,uEAAoD,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACI,KAAK,IADT;AAAA,0DAGM,GAHN,wBAcM,OAdN,yBAwBM,GAxBN,yBA6BM,GA7BN,yBAkCM,KAlCN,yBAuCM,KAvCN,yBA4CM,KA5CN;AAAA;;AAAA;AAAA,4BAIS,QAJT;AAAA;AAAA;AAAA;;AAAA,8BAKyB,OAAO,KAAK,GAAZ,KAAoB,WAL7C;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKiE,mCAAgB,IAAhB,CALjE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAKyF,KAAK,KAL9F;;AAAA;AAKa,iCALb;;AAMS,+BAAO,+BAAY,EAAZ,EAAgB,IAAhB,EAAsB,SAAtB,CAAP;AANT;AAAA;;AAAA;AAOY,4BAAG,YAAY,KAAK,WAApB,EAAiC;AACpC,6DAAc,EAAd,EAAkB,IAAlB;AACH;;AATN;AAAA;;AAAA;AAeK,4BAAG,CAAC,QAAD,IAAa,CAAC,KAAK,aAAtB,EAAqC;AACjC,mCAAO,kCAAe,EAAf,EAAmB,IAAnB,CAAP;AACH,yBAFD,MAEO;AACH,mCAAO,kCAAe,EAAf,EAAmB,IAAnB,CAAP;AACH;;AAnBN;;AAAA;AAyBK,2BAAG,SAAH,CAAa,KAAK,OAAlB,EAA2B,KAAK,KAAhC;AAzBL;;AAAA;AA8BK,2BAAG,SAAH,CAAa,KAAK,OAAlB,EAA2B,KAAK,KAAhC;AA9BL;;AAAA;AAmCK,2BAAG,UAAH,CAAc,KAAK,OAAnB,EAA4B,KAAK,KAAjC;AAnCL;;AAAA;AAwCK,2BAAG,UAAH,CAAc,KAAK,OAAnB,EAA4B,KAAK,KAAjC;AAxCL;;AAAA;AA6CK,2BAAG,UAAH,CAAc,KAAK,OAAnB,EAA4B,KAAK,KAAjC;AA7CL;;AAAA;AAAA,qCAiDgB,KAAK,IAjDrB;;AAAA;AAAA,0DAqDI,IArDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,e;;;;;QAbN,c,GAAA,c;;AAhChB;;AACA;;;;;;AA+BO,SAAS,cAAT,CAAwB,EAAxB,EAA4B,QAA5B,EAAsC,OAAtC,EAA+C;AAClD,QAAI,SAAS,EAAb;AADkD;AAAA;AAAA;;AAAA;AAElD,yDAAwB,6BAAc,QAAd,CAAxB,iHAAiD;AAAA;AAAA,gBAAvC,GAAuC;AAAA,gBAAlC,IAAkC;;AAC7C,gBAAI,UAAU,OAAO,GAAP,+BAAkB,IAAlB,CAAd;AACA,gBAAG,OAAO,QAAQ,MAAf,KAA0B,UAA7B,EAAyC;AACrC,wBAAQ,KAAR,GAAgB,QAAQ,MAAR,CAAe,QAAQ,KAAvB,CAAhB;AACA,gCAAgB,EAAhB,EAAoB,OAApB,EAA6B,IAA7B;AACH;AACJ;AARiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUlD,WAAO,MAAP;AACH;;;;;;;;;;;;;kBCpCuB,M;;AANxB;;AAEA;;;;AACA;;;;AACA;;;;;;AALA;AAOe,SAAS,MAAT,CAAgB,OAAhB,EAAyB;AACpC,cAAU,uBAAgB,OAAhB,CAAV;AACA,QAAG,CAAC,QAAQ,OAAZ,EAAqB;AACjB,4BAAkB,QAAQ,MAA1B;AACH;;AAED,2BAAuB,OAAvB;AACA,QAAI,KAAK,iBAAiB,QAAQ,MAAzB,CAAT;;AAEA;AACA;;AAEA;AACA,OAAG,UAAH,4CAAiB,QAAQ,UAAzB;;AAEA,gCAAa,EAAb,EAAiB,OAAjB;AACH;;AAED,SAAS,gBAAT,CAA0B,MAA1B,EAAiD;AAAA,QAAf,KAAe,uEAAP,KAAO;;AAC7C,QAAI,KAAK,qBAAW,UAAX,CAAsB,MAAtB,CAAT;AACA,QAAI,CAAC,EAAL,EAAS;AACL,cAAM,wDAAN;AACH;;AAED,QAAG,KAAH,EAAU;AACN,aAAK,qBAAW,gBAAX,CAA4B,EAA5B,CAAL;AACH;;AAED,WAAO,EAAP;AACH;;AAED,SAAS,sBAAT,CAAgC,OAAhC,EAAyC;AACrC,YAAQ,MAAR,CAAe,KAAf,GAAuB,QAAQ,UAAR,CAAmB,KAA1C;AACA,YAAQ,MAAR,CAAe,MAAf,GAAwB,QAAQ,UAAR,CAAmB,MAA3C;AACH;;;;;;;;;;;;;;kBCvCuB,e;;;;AAFxB;;AAEe,SAAS,eAAT,CAAyB,OAAzB,EAAkC;AAC7C,QAAI;AACA,iBAAS,IADT;AAEA,gBAAQ;AAFR,OAGG,OAHH,CAAJ;;AAMA,QAAG,OAAO,QAAQ,MAAf,KAA0B,WAA1B,IAAyC,CAAC,QAAQ,MAArD,EAA6D;AACzD,yBAAiB,OAAjB,GAA2B,KAA3B;AACA,yBAAiB,MAAjB,GAA0B,oDAA1B;AACH;;AAED,QAAG,OAAO,QAAQ,UAAf,KAA8B,WAA9B,IAA6C,CAAC,QAAQ,UAAzD,EAAqE;AACjE,yBAAiB,UAAjB,GAA8B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAA9B;AACH;;AAED,QAAG,OAAO,QAAQ,UAAf,KAA8B,WAA9B,IAA6C,CAAC,QAAQ,UAAR,CAAmB,KAAjE,IAA0E,CAAC,QAAQ,UAAR,CAAmB,MAAjG,EAAyG;AACrG,yBAAiB,UAAjB,GAA8B;AAC1B,mBAAO,OAAO,UADY;AAE1B,oBAAQ,OAAO;AAFW,SAA9B;AAIH;;AAED,QAAG,OAAO,QAAQ,WAAf,KAA+B,WAAlC,EAA+C;AAC3C,YAAG,OAAO,QAAQ,WAAR,CAAoB,UAA3B,KAA0C,WAA1C,IACE,CAAC,QAAQ,WAAR,CAAoB,UAApB,CAA+B,KAAhC,IAAyC,CAAC,QAAQ,WAAR,CAAoB,UAApB,CAA+B,MAD9E,EAEA;AACI,6BAAiB,WAAjB,CAA6B,UAA7B,GAA0C,iBAAiB,UAA3D;AACH;AACJ;;AAED,QAAG,OAAO,QAAQ,QAAf,KAA4B,WAA/B,EAA4C;AACxC,yBAAiB,QAAjB,GAA4B,EAA5B;AACH;;AAED,QAAG,OAAO,QAAQ,QAAf,KAA4B,WAA/B,EAA4C;AACxC,yBAAiB,QAAjB,GAA4B,EAA5B;AACH;;AAED,WAAO,gBAAP;AACH;;;;;;;;;AC1CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA2Be,IAAI,YAAW;AAC1B;;;;AAIA,MAAI,CAAC,OAAO,qBAAZ,EAAmC;AACjC,WAAO,qBAAP,GAAgC,YAAW;AACzC,aAAO,OAAO,qBAAP,IACA,OAAO,2BADP,IAEA,OAAO,wBAFP,IAGA,OAAO,sBAHP,IAIA,OAAO,uBAJP,IAKA,WAAS,mCAAoC,QAA7C,EAAuD,wBAAyB,OAAhF,EAAyF;AACvF,eAAO,UAAP,CAAkB,QAAlB,EAA4B,OAAK,EAAjC;AACD,OAPR;AAQD,KAT8B,EAA/B;AAUD;;AAED;;;;;AAKA,MAAI,CAAC,OAAO,oBAAZ,EAAkC;AAChC,WAAO,oBAAP,GAA+B,OAAO,2BAAP,IACA,OAAO,0BADP,IACqC,OAAO,iCAD5C,IAEA,OAAO,uBAFP,IAEkC,OAAO,8BAFzC,IAGA,OAAO,sBAHP,IAGiC,OAAO,6BAHxC,IAIA,OAAO,qBAJP,IAIgC,OAAO,4BAJvC,IAKA,OAAO,YALtC;AAMD;;AAED;;;;;;AAMA,MAAI,eAAe,SAAf,YAAe,CAAS,GAAT,EAAc;AAC/B,WAAO,KACD,0FADC,GAC4F,GAD5F,GACkG,QADzG;AAEA,WAAO,KACL,wEADK,GAEL,qBAFK,GAGL,4DAHK,GAIL,gBAJK,GAIc,GAJd,GAIoB,QAJpB,GAKL,QALK,GAML,oBANF;AAOD,GAVD;;AAYA;;;;AAIA,MAAI,sBAAsB,KACxB,wDADwB,GAExB,wEAFF;;AAIA;;;;AAIA,MAAI,gBAAgB,KAClB,yDADkB,GAElB,qEAFF;;AAIA;;;;;;;;;;;;AAYA,MAAI,aAAa,SAAb,UAAa,CAAS,MAAT,EAAiB,WAAjB,EAA8B,WAA9B,EAA2C;AAC1D,aAAS,mBAAT,CAA6B,GAA7B,EAAkC;AAC9B,UAAI,YAAY,SAAS,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAhB;AACF;AACA,UAAI,SAAJ,EAAe;AACb,YAAI,MAAM,OAAO,qBAAP,GACL,aADK,GAEL,mBAFL;AAGA,YAAI,GAAJ,EAAS;AACP,iBAAO,uBAAuB,GAA9B;AACD;AACD,kBAAU,SAAV,GAAsB,aAAa,GAAb,CAAtB;AACD;AACF;;AAED,kBAAc,eAAe,mBAA7B;;AAEA,QAAI,OAAO,gBAAX,EAA6B;AAC3B,aAAO,gBAAP,CAAwB,2BAAxB,EAAqD,UAAS,KAAT,EAAgB;AAC/D,oBAAY,MAAM,aAAlB;AACD,OAFL,EAEO,KAFP;AAGD;AACD,QAAI,UAAU,gBAAgB,MAAhB,EAAwB,WAAxB,CAAd;AACA,QAAI,CAAC,OAAL,EAAc;AACZ,UAAI,CAAC,OAAO,qBAAZ,EAAmC;AACjC,oBAAY,EAAZ;AACD,OAFD,MAEO;AACL,oBAAY,EAAZ;AACD;AACF;;AAED,WAAO,OAAP;AACD,GAhCD;;AAkCA;;;;;;AAMA,MAAI,kBAAkB,SAAlB,eAAkB,CAAS,MAAT,EAAiB,WAAjB,EAA8B;AAClD,QAAI,QAAQ,CAAC,OAAD,EAAU,oBAAV,EAAgC,WAAhC,EAA6C,WAA7C,CAAZ;AACA,QAAI,UAAU,IAAd;AACA,SAAK,IAAI,KAAK,CAAd,EAAiB,KAAK,MAAM,MAA5B,EAAoC,EAAE,EAAtC,EAA0C;AACxC,UAAI;AACF,kBAAU,OAAO,UAAP,CAAkB,MAAM,EAAN,CAAlB,EAA6B,WAA7B,CAAV;AACD,OAFD,CAEE,OAAM,CAAN,EAAS,CAAE;AACb,UAAI,OAAJ,EAAa;AACX;AACD;AACF;AACD,WAAO,OAAP;AACD,GAZD;;AAcA,SAAO;AACL,qBAAiB,eADZ;AAEL,gBAAY;AAFP,GAAP;AAIH,CAxIc,E;;;;AC3Df;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;ACDA;AACA;;;;;;;;;;;;;;;;;;;;;;wFCYO,iBAAwC,EAAxC,EAA4C,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACA,YADA;AAAA;AAAA;AAAA;;AAAA,yDAEQ,YAFR;;AAAA;AAKG,uCALH,GAKqB,QAAQ,aAL7B;;;AAOH,mCAAW,QAAQ,cAAR,EAAX;AACA,iCAAS,OAAT,GAAmB,gBAAgB,OAAhB,IAA2B,IAA9C,CARG,CAQiD;AACpD,iCAAS,qBAAT,GAAiC,gBAAgB,SAAhB,IAA6B,GAA9D,CATG,CASgE;;AAThE,yDAWI,MAAM,gBAAgB,GAAtB,EACF,IADE,CACG;AAAA,mCAAY,SAAS,WAAT,EAAZ;AAAA,yBADH,EAEF,IAFE,CAEG;AAAA,mCAAe,QAAQ,eAAR,CAAwB,WAAxB,CAAf;AAAA,yBAFH,EAGF,IAHE,CAGG,uBAAe;AACjB,gCAAI,SAAS,QAAQ,kBAAR,EAAb;;AAEA,mCAAO,MAAP,GAAgB,WAAhB;AACA,mCAAO,OAAP,CAAe,QAAf;AACA,qCAAS,OAAT,CAAiB,QAAQ,WAAzB;AACA,mCAAO,KAAP;AACA,mCAAO,IAAP,GAAc,IAAd;;AAEA,sEACO,gBADP;AAEI,uCAAO,kBAFX;AAGI,sCAAM,CAAC,SAAS,iBAAV,EAA6B,CAA7B;AAHV;;AAMA,mCAAO,YAAP;AACH,yBAnBE,EAmBA,KAnBA,CAmBM,iBAAS;AACd,oCAAQ,IAAR;AACA,oCAAQ,GAAR,CAAY,KAAZ;AACH,yBAtBE,CAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,wB;;;;;QAoCN,gB,GAAA,gB;;;;AAjDhB,IAAM,UAAU,KAAK,OAAO,YAAP,IAAuB,OAAO,kBAAnC,GAAhB;AACA,IAAI,WAAW,IAAf;AAAA,IAAqB,SAAS,IAA9B;;AAEA,IAAI,mBAAmB;AACnB,UAAM,GADa;AAEnB,iBAAa,IAFM;AAGnB,YAAQ;AAAA,eAAM,kBAAN;AAAA,KAHW;AAInB,WAAO,OAJY;AAKnB,WAAO;AALY,CAAvB;;AAQA,IAAI,eAAe,IAAnB;;AAsCO,SAAS,gBAAT,GAA4B;AAC/B,QAAM,OAAO,SAAS,iBAAtB;;AAEA,QAAI,YAAY,IAAI,UAAJ,CAAe,IAAf,CAAhB;AACA,QAAI,aAAa,IAAI,UAAJ,CAAe,OAAO,CAAtB,CAAjB;;AAEA;AACA,aAAS,oBAAT,CAA8B,SAA9B;;AAEA,cAAU,OAAV,CAAkB,UAAC,GAAD,EAAM,CAAN,EAAY;AAC1B,mBAAW,IAAX,CAAgB,GAAhB,EAAqB,IAAI,CAAzB,EAA4B,CAAC,IAAI,CAAL,IAAU,CAAtC;AACH,KAFD;;AAIA,WAAO,UAAP;AACH;;;;;;;;kBC/DuB,sB;AAAT,SAAS,sBAAT,CAAgC,QAAhC,EAA0C;AACrD,QAAG,MAAM,OAAN,CAAc,QAAd,CAAH,EAA4B;AACxB,iBAAS,OAAT,CAAiB;AAAA,mBAAM,IAAN;AAAA,SAAjB;AACH,KAFD,MAEO,IAAG,OAAO,QAAP,KAAqB,UAAxB,EAAoC;AACvC;AACH,KAFM,MAEA;AACH,cAAM,0BAAN;AACH;AACJ;;;;;;;;;QCNe,a,GAAA,a;QAIA,gB,GAAA,gB;QAIA,a,GAAA,a;AAVhB,IAAI,aAAa,CAAjB;;AAEO,SAAS,aAAT,GAAyB;AAC5B,WAAO,UAAP;AACH;;AAEM,SAAS,gBAAT,GAA4B;AAC/B,WAAO,EAAE,UAAT;AACH;;AAEM,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC/B,iBAAa,GAAb;AACA,WAAO,GAAP;AACH;;;;;;;;kBCPuB,gB;AANxB,IAAI,UAAU,IAAd;AACA,IAAI,WAAW;AACX,OAAG,CADQ;AAEX,OAAG;AAFQ,CAAf;;AAKe,SAAS,gBAAT,CAA0B,MAA1B,EAAkC;AAC7C,QAAG,CAAC,OAAJ,EAAa;AACT,iBAAS,OAAO,MAAP,KAAkB,WAAlB,GAAgC,SAAS,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAhC,GAA6E,MAAtF;AACA,kBAAU,OAAO,WAAP,GAAqB,aAAK;AAChC,uBAAW;AACP,mBAAG,CAAC,EAAE,KAAF,GAAU,OAAO,UAAlB,IAAgC,OAAO,KADnC;AAEP,mBAAG,CAAC,EAAE,KAAF,GAAU,OAAO,SAAlB,IAA+B,OAAO;AAFlC,aAAX;AAIH,SALD;AAMH;;AAED,WAAO,CAAC,SAAS,CAAV,EAAa,SAAS,CAAtB,CAAP;AACH;;;;;;;;;;;;;;;;;;;;;;kBCjBwB,a;;;;sDAAA,a;;AADzB;AACe,SAAU,aAAV,CAAwB,GAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACK,oBAAY,GAAZ,CADL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACF,uBADE;AAAA;AAAA,2BAED,CAAC,GAAD,EAAM,IAAI,GAAJ,CAAN,CAFC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFCSR;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,6BADD;AAAA;AAAA;AAAA,+BAIe,aAJf;;AAAA;AAIC,6BAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAMC,gCAAQ,KAAR;AAND;;AAAA;AAAA,oFAWI,iBAXJ;AAYC,mCAAO,KAZR;AAaC,oCAAQ;AAAA,uCAAM,KAAN;AAAA;AAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,iB;;;;;;yFAkBtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO,SADP;AAAA;AAAA;AAAA;;AAAA,0DAEe,SAAS,cAAT,CAAwB,OAAxB,CAFf;;AAAA;AAKQ,6BALR,GAKgB,qBALhB;AAMQ,8BANR;AAAA;AAAA;AAAA,+BASuB,kBATvB;;AAAA;AASQ,8BATR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWQ,gCAAQ,GAAR;AAXR,8BAYc,uCAZd;;AAAA;;AAeI,8BAAM,SAAN,GAAkB,MAAlB;AACA,8BAAM,IAAN;AACA,oCAAY,IAAZ;;AAjBJ,0DAmBW,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,kCAAM,gBAAN,CAAuB,SAAvB,EAAkC,UAAC,CAAD;AAAA,uCAAO,QAAQ,KAAR,CAAP;AAAA,6BAAlC,EAAyD,KAAzD;AACH,yBAFM,CAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,W;;;;;;yFAwBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACiB,UAAU,YAAV,CAAuB,YAAvB,CAAoC;AAC7C,mCAAO,KADsC;AAE7C,mCAAO;AACH,uCAAO;AACH,yCAAK,GADF,EACO,OAAO,GADd,EACmB,KAAK;AADxB,iCADJ;AAIH,wCAAQ;AACJ,yCAAK,GADD,EACM,OAAO,GADb,EACkB,KAAK;AADvB;AAJL;AAFsC,yBAApC,CADjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe,gB;;;;;;;AApDf,IAAI,UAAU,IAAd;AAAA,IAAoB,SAAS,IAA7B;AAAA,IAAmC,YAAY,KAA/C;;AAEA,IAAI,oBAAoB;AACpB,UAAM,GADc;AAEpB,iBAAa,IAFO;AAGpB,WAAO,IAHa;AAIpB,WAAO,OAJa;AAKpB,WAAO;AALa,CAAxB;;AA+DA,SAAS,mBAAT,GAA+B;AAC3B,QAAI,QAAQ,SAAS,aAAT,CAAuB,OAAvB,CAAZ;;AAEA,UAAM,EAAN,GAAW,OAAX;AACA,UAAM,KAAN,CAAY,OAAZ,GAAsB,MAAtB;AACA,UAAM,SAAN,GAAkB,6BAAlB;AACA,aAAS,IAAT,CAAc,YAAd,CAA2B,KAA3B,EAAkC,SAAS,IAAT,CAAc,UAAd,CAAyB,CAAzB,CAAlC;;AAEA,WAAO,KAAP;AACH","file":"hackgl.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = { \"default\": require(\"core-js/library/fn/array/from\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/is-iterable\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _promise = require(\"../core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new _promise2.default(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return _promise2.default.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _assign = require(\"../core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _assign2.default || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isIterable2 = require(\"../core-js/is-iterable\");\n\nvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\nvar _getIterator2 = require(\"../core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if ((0, _isIterable3.default)(Object(arr))) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nvar _from = require(\"../core-js/array/from\");\n\nvar _from2 = _interopRequireDefault(_from);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return (0, _from2.default)(arr);\n  }\n};","module.exports = require(\"regenerator-runtime\");\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.is-iterable');\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = true;\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = require('./_hide');\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').isIterable = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) return false;\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) return false;\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","export default function createGlProgram(gl, vshader, fshader) {\n    // create a program object\n    let program = gl.createProgram();\n    if (!program) {\n        return null;\n    }\n\n    // create shader objects\n    let vertexShader = __loadShader(gl, gl.VERTEX_SHADER, vshader);\n    let fragmentShader = __loadShader(gl, gl.FRAGMENT_SHADER, fshader);\n\n    // attach the shader objects\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    // link the program object\n    gl.linkProgram(program);\n\n    // check the result of linking\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        let error = gl.getProgramInfoLog(program);\n\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n\n        throw `hackGl: Failed to link gl program: ${error}`;\n    }\n\n    return program;\n}\n\nfunction __loadShader(gl, type, source) {\n    // create shader object\n    let shader = gl.createShader(type);\n    if (!shader) {\n        throw 'hackGl: unable to create shader';\n    }\n\n    // set the shader program\n    gl.shaderSource(shader, source);\n    // compile the shader\n    gl.compileShader(shader);\n\n    // check the result of compilation\n    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n        let error = gl.getShaderInfoLog(shader);\n        gl.deleteShader(shader);\n        throw `hackGl: Failed to compile shader: ${error}`;\n    }\n\n    return shader;\n}\n","import getMousePosition from '../utils/get-mouse-position';\nimport {getFrameCount, updateFrameCount} from '../utils/frame-count';\n\nconst startTime = Date.now();\n\nexport let defaultUniforms = {\n    u_resolution: {\n        type: '2fv',\n        value: [0.0, 0.0]\n    },\n    u_mouse: {\n        type: '2fv',\n        value: [0.0, 0.0],\n        update: () => getMousePosition()\n    },\n    u_time: {\n        type: 'f',\n        value: 0.0,\n        update: () => (Date.now() - startTime) / 1200\n    },\n    u_frame_count: {\n        type: 'i',\n        value: getFrameCount(),\n        update: getFrameCount\n    }\n}\n","import createGlProgram from './create-gl-program';\nimport initVertexBuffers from './init-vertex-buffers';\nimport {initUniforms, updateUniforms, setUniformValue} from './uniform-utils';\nimport {initCameraUniform} from '../webrtc/init-camera';\nimport {initAudioAnalyserUniform} from '../utils/audio-analyser';\nimport {defaultUniforms} from './default-uniforms';\nimport {rebindFboTextures} from './texture-utils';\n\nconst toyFragmentHeader = require('../shaders/pixeltoy/fragment-header.glsl');\nconst audioFragmentHeader = require('../shaders/audio-fragment-header.glsl');\nconst cameraFragmentHeader = require('../shaders/camera-fragment-header.glsl');\nconst fboFragmentHeader = require('../shaders/fbo-fragment-header.glsl');\nconst toyVertexShader = require('../shaders/pixeltoy/vertex-shader.glsl');\nconst defaultFragmentShader = require('../shaders/pixeltoy/default-fragmentshader.glsl');\n\nexport async function initFramebuffer(gl, fboSettings, fboTextureName, options, prevFboUniforms) {\n    let fboShader = `${toyFragmentHeader}\n                     ${(fboSettings.injectWebcamUniform ? cameraFragmentHeader : '')}\n                     ${(fboSettings.audioAnalyser ? audioFragmentHeader : '')}\n                     ${(fboSettings ? fboFragmentHeader : '')}\n                     ${(fboSettings.fragmentShader)}`;\n\n    let fboUniformData = {\n        ...defaultUniforms,\n        ...fboSettings.uniforms,\n        //...prevFboUniforms\n    };\n\n    fboUniformData.u_resolution.value = [\n        options.resolution.width,\n        options.resolution.height\n    ];\n\n    if(fboSettings.injectWebcamUniform) {\n        fboUniformData.u_camera = await initCameraUniform();\n    }\n\n    if(fboSettings.audioAnalyser) {\n        fboUniformData.u_audio_data = await initAudioAnalyserUniform(gl, fboSettings);\n    }\n\n    // initialize framebuffer object (FBO)\n    let fbo;\n    try {\n        fbo = _initFramebufferObject(gl, fboSettings, options);\n    } catch(error) {\n        console.error(`hackGl: ${error}`);\n        return;\n    }\n\n    fboUniformData[fboTextureName] = {\n        type: 'fbo_t',\n        texture1: fbo.texture1,\n        texture2: fbo.texture2\n    }\n\n    let fboProgram = createGlProgram(gl, toyVertexShader, fboShader);\n    if (!fboProgram) {\n        throw 'hack.Gl: failed to create fbo gl program!';\n    }\n\n    gl.useProgram(fboProgram);\n\n    let fboVertexCount = initVertexBuffers(gl, fboProgram);\n    let fboUniforms = await initUniforms(gl, fboProgram, fboUniformData, fboTextureName);\n\n    let renderToTexture = () => {\n        gl.useProgram(fboProgram);\n\n        rebindFboTextures(gl, fboUniforms);\n        fboUniforms = updateUniforms(gl, fboUniforms);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo); // change the drawing destination to FBO\n\n        // uniform location exists, which means fbo texture accessed in shader => ping pong texture to enable feedback\n        if(fboUniforms[fboTextureName]) {\n            let tmp = fbo.texture2;\n            fbo.texture2 = fbo.texture1;\n            fbo.texture1 = tmp;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, fbo.texture1, 0);\n\n            gl.activeTexture(gl[`TEXTURE${fboUniforms[fboTextureName].textureUnitNo}`]);\n            gl.bindTexture(gl.TEXTURE_2D, fbo.texture2);\n            gl.uniform1i(fboUniforms[fboTextureName].uniform, fboUniforms[fboTextureName].textureUnitNo);\n        }\n\n        // clear and draw\n        gl.viewport(0, 0, options.resolution.width, options.resolution.height);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, fboVertexCount);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null); // change the drawing destination to color buffer\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        // gl.bindTexture(gl.TEXTURE_2D, fbo.texture2);\n    }\n\n    return {\n        renderToTexture,\n        fboUniform: fboUniforms[fboTextureName],\n        addUniforms: async (uniformData) =>  {\n            gl.useProgram(fboProgram);\n            fboUniforms = {\n                ...fboUniforms,\n                ...(await initUniforms(gl, fboProgram, uniformData, fboTextureName))\n            }\n        }\n    }\n}\n\nfunction _initFramebufferObject(gl, fboSettings, options) {\n    let framebuffer, depthBuffer;\n\n    // define the error handling function\n    let error = () => {\n        if (framebuffer) {\n            gl.deleteFramebuffer(framebuffer);\n        }\n        if (texture1) {\n            gl.deleteTexture(texture1);\n        }\n\n        if (texture2) {\n            gl.deleteTexture(texture2);\n        }\n\n        if (depthBuffer) {\n            gl.deleteRenderbuffer(depthBuffer);\n        }\n\n        return null;\n    }\n\n    // create a frame buffer object (FBO)\n    framebuffer = gl.createFramebuffer();\n    if (!framebuffer) {\n        throw 'failed to create frame buffer object';\n        return error();\n    }\n\n    // create a texture object and set its size and parameters\n    let texture1 = gl.createTexture(); // Create a texture object\n    if (!texture1) {\n        throw 'failed to create texture object';\n        return error();\n    }\n\n    let texture2 = gl.createTexture(); // Create a texture object\n    if (!texture2) {\n        throw 'failed to create texture object';\n        return error();\n    }\n\n    // bind the object to target\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\n    // setup texture to be written to\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, options.resolution.width, options.resolution.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    // note: clamp removes need for w x h being a power of two\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    framebuffer.texture1 = texture1;\n\n    // bind the object to target\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\n    // setup texture2 to be written to\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, options.resolution.width, options.resolution.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    // note: clamp removes need for w x h being a power of two\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    framebuffer.texture2 = texture2;\n\n    // create a renderbuffer object and Set its size and parameters\n    depthBuffer = gl.createRenderbuffer(); // Create a renderbuffer object\n    if (!depthBuffer) {\n        throw 'failed to create renderbuffer object';\n        return error();\n    }\n\n    // bind the object to target\n    gl.bindRenderbuffer(gl.RENDERBUFFER, depthBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, options.resolution.width, options.resolution.height);\n\n    // attach the texture and the renderbuffer object to the FBO\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture1, 0);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthBuffer);\n\n    // check if fbo is configured correctly\n    let e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (gl.FRAMEBUFFER_COMPLETE !== e) {\n        throw `frame buffer object is incomplete: ${e.toString()}`;\n        return error();\n    }\n\n    // unbind the buffer object\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    return framebuffer;\n}\n","import createGlProgram from './create-gl-program';\nimport initVertexBuffers from './init-vertex-buffers';\nimport {initUniforms, updateUniforms, setUniformValue} from './uniform-utils';\nimport {initFramebuffer} from './init-fbo';\nimport executeCallbackOrArray from '../utils/execute-callback-or-array';\nimport {updateFrameCount} from '../utils/frame-count';\nimport {initCameraUniform} from '../webrtc/init-camera';\nimport {initAudioAnalyserUniform} from '../utils/audio-analyser';\nimport {rebindFboTextures} from './texture-utils';\n\nimport {defaultUniforms} from './default-uniforms';\n\nconst toyFragmentHeader = require('../shaders/pixeltoy/fragment-header.glsl');\nconst audioFragmentHeader = require('../shaders/audio-fragment-header.glsl');\nconst cameraFragmentHeader = require('../shaders/camera-fragment-header.glsl');\nconst fboFragmentHeader = require('../shaders/fbo-fragment-header.glsl');\nconst toyVertexShader = require('../shaders/pixeltoy/vertex-shader.glsl');\nconst defaultFragmentShader = require('../shaders/pixeltoy/default-fragmentshader.glsl');\n\nexport default async function initPixelToy(gl, options) {\n    let uniformData = {\n        ...defaultUniforms,\n        ...options.uniforms\n    };\n\n    let fragmentShader = `${toyFragmentHeader}\n                          ${(options.injectWebcamUniform ? cameraFragmentHeader : '')}\n                          ${(options.audioAnalyser ? audioFragmentHeader : '')}\n                          ${(options.feedbackFbo ? fboFragmentHeader : '')}\n                          ${(options.fragmentShader ? options.fragmentShader : defaultFragmentShader)}`;\n\n    uniformData.u_resolution.value = [options.resolution.width, options.resolution.height];\n\n    if(options.injectWebcamUniform) {\n        uniformData.u_camera = await initCameraUniform(options);\n    }\n\n    if(options.audioAnalyser) {\n        uniformData.u_audio_data = await initAudioAnalyserUniform(gl, options);\n    }\n\n    let fbos = [];\n    let fboUniforms = {};\n\n    if(options.feedbackFbo) {\n        let fboCount = 0;\n\n        if(options.feedbackFbo.length) {\n            let fboUniforms = {};\n\n            for(let fboSettings of options.feedbackFbo) {\n                let fbo = await initFramebuffer(gl, fboSettings, `u_fbo${fboCount}`, options, fboUniforms);\n\n                if(typeof fbo.fboUniform !== 'undefined') {\n                    uniformData[`u_fbo${fboCount}`] = fbo.fboUniform;\n                    fboUniforms[`u_fbo${fboCount}`] = fbo.fboUniform; // save fbo uniform data\n                }\n\n                fbos.push(fbo);\n                fboCount++;\n            }\n\n            // add all fbo textures to all fbos (=> fbo0 can access fbo3 and fbo3 can access fb01 and so on...)\n            for(let fbo of fbos) {\n                await fbo.addUniforms(fboUniforms);\n            }\n        } else {\n            let fbo = await initFramebuffer(gl, options.feedbackFbo, `u_fbo${fboCount}`, options);\n            uniformData[`u_fbo${fboCount}`] = fbo.fboUniform;\n            fbos.push(fbo);\n        }\n    }\n\n    let program = createGlProgram(gl, toyVertexShader, fragmentShader);\n    if (!program) {\n        throw 'hack.Gl: failed to create main gl program!';\n    }\n\n    gl.useProgram(program);\n    let vertexCount = initVertexBuffers(gl, program, options);\n    let uniforms = await initUniforms(gl, program, uniformData, 'main fragment');\n\n    let _renderFragmentShader = () => {\n        gl.useProgram(program);\n\n        rebindFboTextures(gl, uniforms);\n        uniforms = updateUniforms(gl, uniforms, options);\n\n        gl.viewport(0, 0, options.resolution.width, options.resolution.height); // set a viewport for FBO\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertexCount);\n    }\n\n    // main render loop\n    let _render = () => {\n        if(fbos.length) {\n            for(let fbo of fbos) {\n                fbo.renderToTexture();\n            }\n        }\n\n        _renderFragmentShader();\n\n        executeCallbackOrArray(options.onRender);\n        updateFrameCount();\n        requestAnimationFrame(_render);\n    }\n\n    _render();\n}\n","export default function initVertexBuffers(gl, program) {\n    // cover whole canvas with quad\n    let vertices = new Float32Array([\n        -1.0, 1.0,\n        -1.0, -1.0,\n        1.0, 1.0,\n        1.0, -1.0\n    ]);\n\n    let vertexCount = 4; // number of vertices\n\n    // create a buffer object\n    let vertexBuffer = gl.createBuffer();\n    if (!vertexBuffer) {\n        throw 'hackGl: failed to create the buffer object';\n    }\n\n    // bind the buffer object to target\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    // write data into the buffer object\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    let a_position = gl.getAttribLocation(program, 'a_position');\n    if (a_position < 0) {\n        throw 'hackGl: pixeltoy failed to get the storage location of a_position';\n    }\n\n    // assign the buffer object to a_position variable\n    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);\n    // enable the assignment to a_position variable\n    gl.enableVertexAttribArray(a_position);\n\n    return vertexCount;\n}\n","let textureUnitNo = 0;\n\nexport async function loadTextureData(data) {\n    return new Promise((resolve, reject) => {\n        let image = new Image();\n        image.onload = () => resolve(image);\n        image.onerror = (e) => reject(e);\n        image.src = data.url;\n    });\n}\n\nexport function initTexture(gl, data, image) {\n    const maxTextureCount = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    if(textureUnitNo > maxTextureCount) {\n        throw `hackGl: max number of texture units (${maxTextureCount}) exceeded`;\n    }\n\n    let texture = gl.createTexture();\n\n    // activate texture\n    gl.activeTexture(gl[`TEXTURE${textureUnitNo}`]);\n\n    // bind texture object\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // flip axes to xy instead of yx\n    if(typeof data.flipY === 'undefined' || data.flipY != false) {\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n    }\n\n    // set params\n\n    // note: clamp removes need for w x h being a power of two\n    let repeatTypeS = gl.CLAMP_TO_EDGE, repeatTypeT = gl.CLAMP_TO_EDGE;\n    if(_imageDimensionArePowerOf2(image)) {\n        repeatTypeS = gl.REPEAT;\n        repeatTypeT = gl.REPEAT;\n    }\n\n    if(data.wrapS && data.wrapS == 'clamp') {\n        repeatTypeS = gl.CLAMP_TO_EDGE;\n    }\n\n    if(data.wrapT && data.wrapT == 'clamp') {\n        repeatTypeT = gl.CLAMP_TO_EDGE;\n    }\n\n    if(data.wrapS && data.wrapS == 'repeat') {\n        repeatTypeS = gl.REPEAT;\n    }\n\n    if(data.wrapT && data.wrapT == 'repeat') {\n        repeatTypeT = gl.REPEAT;\n    }\n\n    if(data.wrapS && data.wrapS == 'mirrored-repeat') {\n        repeatTypeS = gl.MIRRORED_REPEAT;\n    }\n\n    if(data.wrapT && data.wrapT == 'mirrored-repeat') {\n        repeatTypeT = gl.MIRRORED_REPEAT;\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, repeatTypeS);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, repeatTypeT);\n\n    let internalFormat = gl.RGBA; //data.internalFormat || gl.RGBA;\n    let srcFormat = gl.RGBA; //data.srcFormat || gl.RGBA;\n    let border = 0;\n\n    // set the texture image\n    if(typeof data.size !== 'undefined') {\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, data.size[0], data.size[1], 0, srcFormat, gl.UNSIGNED_BYTE, image);\n        // gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, data.size[0], data.size[1], 0, srcFormat, gl.FLOAT, data.value);\n    } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, srcFormat, gl.UNSIGNED_BYTE, image);\n    }\n\n    if(data.generateMips) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n        gl.generateMipmap(gl.TEXTURE_2D);\n    } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    // set the texture unit number to the sampler\n    gl.uniform1i(data.uniform, textureUnitNo);\n    data.textureUnitNo = textureUnitNo;\n    data.texture = texture;\n\n    textureUnitNo++;\n    return data;\n}\n\nexport function initFboTexture(gl, data) {\n    gl.activeTexture(gl[`TEXTURE${textureUnitNo}`]);\n    gl.bindTexture(gl.TEXTURE_2D, data.texture2);\n\n    if(data.uniform) {\n        gl.uniform1i(data.uniform, textureUnitNo);\n    }\n\n    data.textureUnitNo = textureUnitNo;\n    textureUnitNo++;\n\n    return data;\n}\n\nexport function bindFboTexture(gl, data) {\n    gl.activeTexture(gl[`TEXTURE${data.textureUnitNo}`]);\n    gl.bindTexture(gl.TEXTURE_2D, data.texture2);\n    gl.uniform1i(data.uniform, data.textureUnitNo);\n    return data;\n}\n\nexport function rebindFboTextures(gl, uniforms) {\n    let fboUniforms = Object.keys(uniforms).reduce((a, uniformName) => (\n        uniformName.startsWith('u_fbo')\n        ? [...a, uniforms[uniformName]]\n        : a\n    ), []);\n\n    fboUniforms.forEach(uniform => {\n        gl.activeTexture(gl[`TEXTURE${uniform.textureUnitNo }`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture2);\n        gl.uniform1i(uniform.uniform, uniform.textureUnitNo);\n    });\n}\n\nexport function updateTexture(gl, data) {\n    gl.activeTexture(gl[`TEXTURE${data.textureUnitNo}`]);\n    gl.bindTexture(gl.TEXTURE_2D, data.texture);\n\n    let internalFormat = gl.RGBA; //data.internalFormat || gl.RGBA;\n    let srcFormat = gl.RGBA; //data.srcFormat || gl.RGBA;\n\n    if(typeof data.size !== 'undefined') {\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, data.size[0], data.size[1], 0, srcFormat, gl.UNSIGNED_BYTE, data.value);\n    } else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, srcFormat, gl.UNSIGNED_BYTE, data.value);\n    }\n\n    // gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, srcFormat, gl.UNSIGNED_BYTE, data.value);\n}\n\nfunction _imageDimensionArePowerOf2(image) {\n  return (image.naturalWidth & (image.naturalWidth - 1)) == 0 && (image.naturalHeight & (image.naturalHeight - 1)) == 0;\n}\n","import {initTexture, initFboTexture, bindFboTexture, updateTexture, loadTextureData, rebindFboTextures} from './texture-utils';\nimport iterateObject from '../utils/iterate-object';\n\nexport async function initUniforms(gl, program, uniformData, shaderName) {\n    let result = {};\n\n    for (let [uniformName, data] of iterateObject(uniformData)) {\n        let uniform = gl.getUniformLocation(program, new String(uniformName));\n        if (!uniform) {\n            console.warn(`hackGl: ${shaderName} shader ` +\n                         `failed to get the storage location of \"${uniformName}\" - ignoring variable. ` +\n                         'Perhaps you forgot to use it in your shader?');\n\n            // don't init uniform, but still init texture unit for the fbo rendering\n            if(data.type != 'fbo_t') {\n                continue;\n            }\n        }\n\n        let updatedData = {\n            ...data,\n            uniform\n        };\n\n        // await needed for texture image data loading\n        updatedData = await setUniformValue(gl, updatedData);\n        result[uniformName] = updatedData;\n    }\n\n    return result;\n}\n\nexport function updateUniforms(gl, uniforms, options) {\n    let result = {};\n    for (let [key, data] of iterateObject(uniforms)) {\n        let uniform = result[key] = {...data};\n        if(typeof uniform.update === 'function') {\n            uniform.value = uniform.update(uniform.value);\n            setUniformValue(gl, uniform, true);\n        }\n    }\n\n    return result;\n}\n\nexport async function setUniformValue(gl, data, updating = false) {\n    switch(data.type) {\n        // texture sampler\n        case 't':\n            if(!updating) {\n                let imageData = typeof data.url !== 'undefined' ? await loadTextureData(data) : data.value;\n                data = initTexture(gl, data, imageData);\n            } else if(updating && data.needsUpdate) {\n                updateTexture(gl, data);\n            }\n\n            break;\n\n        // fbo texture sampler\n        case 'fbo_t':\n            if(!updating && !data.textureUnitNo) {\n                data = initFboTexture(gl, data);\n            } else {\n                data = bindFboTexture(gl, data);\n            }\n\n            break\n\n        // integer\n        case 'i':\n            gl.uniform1i(data.uniform, data.value);\n            break;\n\n        // float\n        case 'f':\n            gl.uniform1f(data.uniform, data.value);\n            break;\n\n        // float vec2\n        case '2fv':\n            gl.uniform2fv(data.uniform, data.value);\n            break;\n\n        // float vec3\n        case '3fv':\n            gl.uniform3fv(data.uniform, data.value);\n            break;\n\n        // float vec4\n        case '4fv':\n            gl.uniform4fv(data.uniform, data.value);\n            break;\n\n        default:\n            throw `: ${data.type} uniform not yet implemented!`;\n            break;\n    }\n\n    return data;\n}\n","// require('babel-polyfill');\nimport 'whatwg-fetch';\n\nimport webGlUtils from './lib/webgl-utils';\nimport initPixelToy from './gl/init-pixel-toy';\nimport validateOptions from './init/options';\n\nexport default function hackGl(options) {\n    options = validateOptions(options);\n    if(!options.isValid) {\n        throw `hack.Gl: ${options.errors}`;\n    }\n\n    _setupCanvasResolution(options);\n    let gl = _getWebGlContext(options.canvas);\n\n    // var float_texture_ext = gl.getExtension('OES_texture_float');\n    // console.log(\"Float texture extension: \" + float_texture_ext);\n\n    // specify the color for clearing canvas\n    gl.clearColor(...options.clearColor);\n\n    initPixelToy(gl, options);\n}\n\nfunction _getWebGlContext(canvas, debug = false) {\n    let gl = webGlUtils.setupWebGL(canvas);\n    if (!gl) {\n        throw 'hack.Gl: failed to get the rendering context for webGl';\n    }\n\n    if(debug) {\n        gl = webGlUtils.makeDebugContext(gl);\n    }\n\n    return gl;\n}\n\nfunction _setupCanvasResolution(options) {\n    options.canvas.width = options.resolution.width;\n    options.canvas.height = options.resolution.height;\n}\n","// wow, yeah, this needs work - the boring part\n\nexport default function validateOptions(options) {\n    let validatedOptions = {\n        isValid: true,\n        errors: '',\n        ...options\n    };\n\n    if(typeof options.canvas === 'undefined' || !options.canvas) {\n        validatedOptions.isValid = false;\n        validatedOptions.errors = \"\\nNo canvas element supplied when calling hackGl()\";\n    }\n\n    if(typeof options.clearColor === 'undefined' || !options.clearColor) {\n        validatedOptions.clearColor = [0.0, 0.0, 0.0, 1.0];\n    }\n\n    if(typeof options.resolution === 'undefined' || !options.resolution.width || !options.resolution.height) {\n        validatedOptions.resolution = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        }\n    }\n\n    if(typeof options.feedbackFbo !== 'undefined') {\n        if(typeof options.feedbackFbo.resolution === 'undefined' ||\n            (!options.feedbackFbo.resolution.width || !options.feedbackFbo.resolution.height))\n        {\n            validatedOptions.feedbackFbo.resolution = validatedOptions.resolution;\n        }\n    }\n\n    if(typeof options.uniforms === 'undefined') {\n        validatedOptions.uniforms = {};\n    }\n\n    if(typeof options.onRender === 'undefined') {\n        validatedOptions.onRender = [];\n    }\n\n    return validatedOptions;\n}\n","/*\n * Copyright 2010, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n/**\n * @fileoverview This file contains functions every webgl program will need\n * a version of one way or another.\n *\n * Instead of setting up a context manually it is recommended to\n * use. This will check for success or failure. On failure it\n * will attempt to present an approriate message to the user.\n *\n *       gl = WebGLUtils.setupWebGL(canvas);\n *\n * For animated WebGL apps use of setTimeout or setInterval are\n * discouraged. It is recommended you structure your rendering\n * loop like this.\n *\n *       function render() {\n *         window.requestAnimationFrame(render, canvas);\n *\n *         // do rendering\n *         ...\n *       }\n *       render();\n *\n * This will call your rendering function up to the refresh rate\n * of your display but will stop rendering if your app is not\n * visible.\n */\n\nexport default new function() {\n    /**\n     * Provides requestAnimationFrame in a cross browser\n     * way.\n     */\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = (function() {\n        return window.requestAnimationFrame ||\n               window.webkitRequestAnimationFrame ||\n               window.mozRequestAnimationFrame ||\n               window.oRequestAnimationFrame ||\n               window.msRequestAnimationFrame ||\n               function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n                 window.setTimeout(callback, 1000/60);\n               };\n      })();\n    }\n\n    /** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec.\n     *\n     * Cancels an animation frame request.\n     * Checks for cross-browser support, falls back to clearTimeout.\n     * @param {number}  Animation frame request. */\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||\n                                     window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||\n                                     window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||\n                                     window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||\n                                     window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||\n                                     window.clearTimeout);\n    }\n\n    /**\n     * Creates the HTLM for a failure message\n     * @param {string} canvasContainerId id of container of th\n     *        canvas.\n     * @return {string} The html.\n     */\n    var makeFailHTML = function(msg) {\n      return '' +\n            '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' + msg + '</div>';\n      return '' +\n        '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\n        '<td align=\"center\">' +\n        '<div style=\"display: table-cell; vertical-align: middle;\">' +\n        '<div style=\"\">' + msg + '</div>' +\n        '</div>' +\n        '</td></tr></table>';\n    };\n\n    /**\n     * Mesasge for getting a webgl browser\n     * @type {string}\n     */\n    var GET_A_WEBGL_BROWSER = '' +\n      'This page requires a browser that supports WebGL.<br/>' +\n      '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>';\n\n    /**\n     * Mesasge for need better hardware\n     * @type {string}\n     */\n    var OTHER_PROBLEM = '' +\n      \"It doesn't appear your computer can support WebGL.<br/>\" +\n      '<a href=\"http://get.webgl.org\">Click here for more information.</a>';\n\n    /**\n     * Creates a webgl context. If creation fails it will\n     * change the contents of the container of the <canvas>\n     * tag to an error message with the correct links for WebGL.\n     * @param {Element} canvas. The canvas element to create a\n     *     context from.\n     * @param {WebGLContextCreationAttirbutes} opt_attribs Any\n     *     creation attributes you want to pass in.\n     * @param {function:(msg)} opt_onError An function to call\n     *     if there is an error during creation.\n     * @return {WebGLRenderingContext} The created context.\n     */\n    var setupWebGL = function(canvas, opt_attribs, opt_onError) {\n      function handleCreationError(msg) {\n          var container = document.getElementsByTagName(\"body\")[0];\n        //var container = canvas.parentNode;\n        if (container) {\n          var str = window.WebGLRenderingContext ?\n               OTHER_PROBLEM :\n               GET_A_WEBGL_BROWSER;\n          if (msg) {\n            str += \"<br/><br/>Status: \" + msg;\n          }\n          container.innerHTML = makeFailHTML(str);\n        }\n      };\n\n      opt_onError = opt_onError || handleCreationError;\n\n      if (canvas.addEventListener) {\n        canvas.addEventListener(\"webglcontextcreationerror\", function(event) {\n              opt_onError(event.statusMessage);\n            }, false);\n      }\n      var context = create3DContext(canvas, opt_attribs);\n      if (!context) {\n        if (!window.WebGLRenderingContext) {\n          opt_onError(\"\");\n        } else {\n          opt_onError(\"\");\n        }\n      }\n\n      return context;\n    };\n\n    /**\n     * Creates a webgl context.\n     * @param {!Canvas} canvas The canvas tag to get context\n     *     from. If one is not passed in one will be created.\n     * @return {!WebGLContext} The created context.\n     */\n    var create3DContext = function(canvas, opt_attribs) {\n      var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\n      var context = null;\n      for (var ii = 0; ii < names.length; ++ii) {\n        try {\n          context = canvas.getContext(names[ii], opt_attribs);\n        } catch(e) {}\n        if (context) {\n          break;\n        }\n      }\n      return context;\n    }\n\n    return {\n      create3DContext: create3DContext,\n      setupWebGL: setupWebGL\n    };\n}\n","module.exports = \"uniform sampler2D u_audio_data;\\n\\n// https://stackoverflow.com/questions/35799286\\nfloat _hackgl_toLog(float value, float min, float max){\\n    float exp = (value-min) / (max-min);\\n    return min * pow(max/min, exp);\\n}\\n\\n/*\\n * Freq data is stored as unsigned integers/rgba. Since webGl 1 doesn't have texelFetch we have to\\n * access the data with uv coordinates using texture2D.\\n *\\n * Example:\\n * Assume an fft size of 512, which means a bin count of 256 freq data values.\\n * To access freq data at, for example, index 128 in the original array returned from the web audio api, do:\\n * _hackgl_getFreqData(128.0/256.0);\\n */\\n\\nfloat _hackgl_getFreqData(float index) {\\n    return texture2D(u_audio_data, vec2(index, 0.5)).r;\\n}\\n\\nfloat hackgl_getAudioFreqData(float index, float minCrop, float maxCrop) {\\n    // crop bottom and top of range\\n    float xCoord = mix(minCrop, maxCrop, index);\\n\\n    // get freq for current index\\n    float fft = _hackgl_getFreqData(xCoord);\\n    return fft;\\n}\\n\\nfloat hackgl_getAudioFreqData(float index) {\\n    return hackgl_getAudioFreqData(index, 0.3, 0.7);\\n}\\n\\nfloat hackgl_getLogAudioFreqData(float index, float minCrop, float maxCrop) {\\n    //crop bottom and top of range\\n    float xCoord = mix(minCrop, maxCrop, index);\\n    //logarithmic sampling\\n    float xPos = _hackgl_toLog(xCoord, 0.01, 1.0);\\n\\n    // get freq for current index\\n    float fft = _hackgl_getFreqData(xPos);\\n    return fft;\\n}\\n\\nfloat hackgl_getLogAudioFreqData(float index) {\\n    return hackgl_getLogAudioFreqData(index, 0.3, 0.7);\\n}\\n\";\n","module.exports = \"uniform sampler2D u_camera;\\n\";\n","module.exports = \"uniform sampler2D u_fbo0;\\nuniform sampler2D u_fbo1;\\nuniform sampler2D u_fbo2;\\nuniform sampler2D u_fbo3;\\nuniform sampler2D u_fbo4;\\nuniform sampler2D u_fbo5;\\nuniform sampler2D u_fbo6;\\n\";\n","module.exports = \"void main() {\\n    vec2 uv = gl_FragCoord.xy / u_resolution.xy;\\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n}\\n\";\n","module.exports = \"#ifdef GL_ES\\n    precision mediump float;\\n#endif\\n\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\nuniform int u_frame_count;\\n\";\n","module.exports = \"attribute vec4 a_position;\\n\\nvoid main() {\\n    gl_Position = a_position;\\n}\\n\";\n","const context = new (window.AudioContext || window.webkitAudioContext)();\nvar analyser = null, source = null;\n\nlet audioUniformBase = {\n    type: 't',\n    needsUpdate: true,\n    update: () => getFrequencyData(),\n    wrapS: 'clamp',\n    wrapT: 'clamp'\n}\n\nlet audioUniform = null;\n\nexport async function initAudioAnalyserUniform(gl, options) {\n    if(audioUniform) {\n        return audioUniform;\n    }\n\n    const analyserOptions = options.audioAnalyser;\n\n    analyser = context.createAnalyser();\n    analyser.fftSize = analyserOptions.fftSize || 1024; // 1024 / 2 = 512 data points per sample of sound\n    analyser.smoothingTimeConstant = analyserOptions.smoothing || 0.5; //0.2;\n\n    return fetch(analyserOptions.url)\n        .then(response => response.arrayBuffer())\n        .then(arrayBuffer => context.decodeAudioData(arrayBuffer))\n        .then(audioBuffer => {\n            let source = context.createBufferSource();\n\n            source.buffer = audioBuffer;\n            source.connect(analyser);\n            analyser.connect(context.destination);\n            source.start();\n            source.loop = true;\n\n            audioUniform = {\n                ...audioUniformBase,\n                value: getFrequencyData(),\n                size: [analyser.frequencyBinCount, 1],\n            };\n\n            return audioUniform;\n        }).catch(error => {\n            console.warn(`hack.gl: failed to fetch audio data: `);\n            console.dir(error);\n        });\n}\n\nexport function getFrequencyData() {\n    const size = analyser.frequencyBinCount;\n\n    let dataArray = new Uint8Array(size);\n    let shaderData = new Uint8Array(size * 4);\n\n    // analyser.getByteTimeDomainData(dataArray);\n    analyser.getByteFrequencyData(dataArray);\n\n    dataArray.forEach((val, i) => {\n        shaderData.fill(val, i * 4, (i + 1) * 4);\n    });\n\n    return shaderData;\n}\n","export default function executeCallbackOrArray(callback) {\n    if(Array.isArray(callback)) {\n        callback.forEach(cb => cb());\n    } else if(typeof(callback) === 'function') {\n        callback();\n    } else {\n        throw 'hackGl: illegal callback';\n    }\n}\n","let frameCount = 0;\n\nexport function getFrameCount() {\n    return frameCount;\n}\n\nexport function updateFrameCount() {\n    return ++frameCount;\n}\n\nexport function setFrameCount(val) {\n    frameCount = val;\n    return val;\n}\n","let handler = null;\nlet position = {\n    x: 0,\n    y: 0\n};\n\nexport default function getMousePosition(canvas) {\n    if(!handler) {\n        canvas = typeof canvas === 'undefined' ? document.getElementsByTagName('canvas')[0] : canvas;\n        handler = canvas.onmousemove = e => {\n            position = {\n                x: (e.pageX - canvas.offsetLeft) / canvas.width,\n                y: (e.pageY - canvas.offsetTop) / canvas.height\n            }\n        }\n    }\n\n    return [position.x, position.y];\n}\n","// helper generator to iterate by [key, value] over objects\nexport default function* iterateObject(obj) {\n    for (let key of Object.keys(obj)) {\n        yield [key, obj[key]];\n    }\n}\n","let context = null, canvas = null, streaming = false;\n\nlet cameraUniformBase = {\n    type: 't',\n    needsUpdate: true,\n    value: null,\n    wrapS: 'clamp',\n    wrapT: 'clamp'\n}\n\nexport async function initCameraUniform() {\n    let video;\n\n    try {\n        video = await _initCamera();\n    } catch(error) {\n        console.error(error);\n        return;\n    }\n\n    return {\n        ...cameraUniformBase,\n        value: video,\n        update: () => video\n    }\n}\n\n\nasync function _initCamera() {\n    if(streaming) {\n        return document.getElementById('video');\n    }\n\n    let video = _injectVideoElement();\n    let stream;\n\n    try {\n        stream = await _getCameraStream();\n    } catch(error) {\n        console.dir(error);\n        throw 'hackGl: Could not load camera stream:';\n    }\n\n    video.srcObject = stream;\n    video.play();\n    streaming = true;\n\n    return new Promise((resolve, reject) => {\n        video.addEventListener('canplay', (e) => resolve(video), false)\n    });\n}\n\nasync function _getCameraStream() {\n    return await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n            width: {\n                min: 640, ideal: 640, max: 640\n            },\n            height: {\n                min: 480, ideal: 480, max: 480\n            }\n        }\n    });\n}\nfunction _injectVideoElement() {\n    let video = document.createElement('video');\n\n    video.id = 'video';\n    video.style.display = 'none';\n    video.innerHTML = 'Video stream not available.';\n    document.body.insertBefore(video, document.body.childNodes[0]);\n\n    return video;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}